Elixir MarsRover kata script
============================

Intro
-----

: Start on entry emacs screen
Hello everyone,

today we are going to be working on the Marsrover kata ... on Elixir.

A few notes before we start:
- I'm not an Elixir expert. Someone more knowledgeable of the language could point to doing different things.
- I will be using TDD and Outside-In
- I want to demonstrate the power of using data manipulation on the solution of the problem


Mix is the tool that allow us to create, test and compile elixir applications

$ mix new marsrover

This creates a new default project for elixir.

$ mix test

We can run the tests from the command line using mix. But from now we will do anything from inside emacs using the Alchemist, a minor mode for Elixir.


-> Open marsrover_test.exs
Conventions module name MarsroverTest, filename marsrover_test

=> C-x 3
=> C-x o
=> C-x C-f
-> Open marsrover.ex

-> Eliminate doctest from marsrover_test.exs
Not needed for what we are going to do.
=> M-g M-g 3 RET
=> C-Space
=> M-g M-g 8 RET
=> C-w
-> Eliminate @moduledoc and @doc from marsrover.ex
=> M-g M-g 2 RET
=> C-Space
=> M-g M-g 15 RET
=> C-w
-> Add "Basic Acceptance Test"

We are using \n to keep the line short, but we could us multiline strings. We don't do that for now to avoid issues with trimming.

To run tests within Emacs we will use the command
=> C-c a t
Of course it fails because we haven't implemented yet the `process` function on the `Marsrover` module. So let's do that.

First let me rearrange a bit. I prefer to have the test report always visible, so doesn't surprise me where it appears.

=> C-x o
=> C-x 0
=> C-x 2
=> C-x b Alchemist Test Report
=> C-15 C-x ^

Buuuuuut ... before we do that let's think a bit. Just because we are doing TDD, it doesn't mean we don't give some thought to the design that we want to achieve. On this case there are three steps that we want to take:
- parse the input
- move all the rovers
- return the final position

So let's remove the exiting `hello` function from the marsrover.ex and add our new `process` function
=> M-g M-g 2 RET
=> C-Space
=> M-g M-g 5 RET
=> C-w

All three steps that we have talked about can become three functions. Then we can use the pipe to link it all of them. In case you don't know, the pipe on elixir gets the data from the left (which could be the output of a function), and pass it as the first parameter on the parameter on the right of the pipe. We add input at the top and now we have the definition of the function exactly the same as the steps that we wanted to do.



Now testing fails because we are missing these new functions. Remember that all of them are going to receive a parameter, that being the data coming from the left of the pipe. Furthermore, like in all functional languages, a function always returns the falue of the last expression. And if there is no expression, Elixir will return `nil`

If we run the test, now we have the assertiong failure and some warning. For elixir, if you add an underscore before the name of a parameter the compiler will now that the parameter is not being used and will not give you a warning. In fact, we could have just the underscore with no name. So we make the last function return "1 3 N\5 1 E"

Now we have some passing test. But let's start actually to do some more interesting stuff.